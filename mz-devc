#!/usr/bin/env python3
# PYTHON_ARGCOMPLETE_OK
import argparse
import dataclasses
import os.path
import subprocess
import sys
import typing
import itertools
try:
    import argcomplete
except ImportError:
    argcomplete = None

ROOT_DIR = os.path.dirname(os.path.realpath(__file__))

STD_PASS = 'devtest'


@dataclasses.dataclass
class Cli:
    args: list[str]
    alias: str
    env: dict[str, str] = dataclasses.field(default_factory=lambda: {})


@dataclasses.dataclass
class Service:
    service_name: str
    cli: list[Cli] = dataclasses.field(default_factory=lambda: [])
    file: typing.Optional[str] = None

    @property
    def full_file_path(self):
        if self.file is None:
            return None
        return os.path.join(ROOT_DIR, self.file)

    @property
    def project_name(self):
        if self.file is None:
            return None
        file_stripped = self.file
        if file_stripped.endswith('.yml'):
            file_stripped = file_stripped[:-4]
        elif file_stripped.endswith('.yaml'):
            file_stripped = file_stripped[:-5]
        return f'mz-devc-{file_stripped}'


def _services() -> tuple[list[str], dict[str, Service]]:
    services_index = {}
    cli_aliases = set()
    dev_services = {
        'redis.yml': [
            Service('redis-single', cli=[
                Cli(
                    ['redis-cli',
                     '--user', 'default', '--pass', STD_PASS, '--no-auth-warning'],
                    'redis-cli',
                    env={'REDISCLI_HISTFILE': '/bitnami/redis/data/redis-cli.history'}
                )
            ]),
            Service('redis-single-2', cli=[
                Cli(
                    ['redis-cli', '-p', '6380',
                     '--user', 'default', '--pass', STD_PASS, '--no-auth-warning'],
                    'redis-cli',
                    env={'REDISCLI_HISTFILE': '/bitnami/redis/data/redis-cli.history'}
                )
            ]),
            Service('redis-single-no-auth', cli=[
                Cli(
                    ['redis-cli'],
                    'redis-cli',
                    env={'REDISCLI_HISTFILE': '/bitnami/redis/data/redis-cli.history'}
                )
            ]),
        ]
    }
    for file, services in dev_services.items():
        for service in services:
            services_index[service.service_name] = dataclasses.replace(service, file=file)
            for cli in service.cli:
                cli_aliases.add(cli.alias)

    return list(cli_aliases), services_index

CLI_ALIASES, SERVICES = _services()


def args_parser() -> argparse.ArgumentParser:

    def append_help(any_parser):
        help_arg = any_parser.add_argument('-h', '--help', action='help', default=argparse.SUPPRESS,
                                           help='Show help')
        if argcomplete:
            help_arg.completer = argcomplete.SuppressCompleter()

    parser = argparse.ArgumentParser(description='mz-devc', add_help=False)
    append_help(parser)

    subparsers = parser.add_subparsers(title='commands', dest='command')

    start = subparsers.add_parser('start', help='command', add_help=False)
    append_help(start)
    start.add_argument('service', metavar='SERVICE_NAME', type=str, choices=SERVICES.keys(), help='service')

    stop = subparsers.add_parser('stop', help='command', add_help=False)
    append_help(stop)
    stop.add_argument('service', metavar='SERVICE_NAME', type=str, choices=SERVICES.keys(), help='service')

    cli = subparsers.add_parser('cli', help='command', add_help=False)
    append_help(cli)
    cli.add_argument('service', metavar='SERVICE_NAME', type=str, choices=SERVICES.keys(), help='service')
    cli.add_argument('--cli', metavar='CLI_ALIAS', type=str, required=False, choices=CLI_ALIASES, help='tool')
    cli.add_argument('rest', nargs=argparse.REMAINDER)

    return parser


def docker_compose(args):
    final_args = ['docker', 'compose'] + args
    try:
        subprocess.check_call(final_args)
    except subprocess.CalledProcessError as e:
        return e.returncode
    return 0


def main():
    parser = args_parser()
    if argcomplete:
        argcomplete.autocomplete(parser)
    args = parser.parse_args()
    if args.command == 'start':
        service = SERVICES.get(args.service)
        if not service:
            print(f'Unknown service {args.service}', file=sys.stderr)
            return 2
        return docker_compose([
            '--file', service.full_file_path,
            '--project-name', service.project_name,
            'up', service.service_name,
            '--detach'
        ])
    elif args.command == 'stop':
        service = SERVICES.get(args.service)
        if not service:
            print(f'Unknown service {args.service}', file=sys.stderr)
            return 2
        return docker_compose([
            '--file', service.full_file_path,
            '--project-name', service.project_name,
            'stop', service.service_name,
        ])
    elif args.command == 'cli':
        service = SERVICES.get(args.service)
        if not service:
            print(f'Unknown service {args.service}', file=sys.stderr)
            return 2
        if args.cli is not None:
            cli = next(i for i in service.cli if i.alias == args.cli)
            if cli is None:
                print(f'Unknown cli alias {args.cli}', file=sys.stderr)
                return 2
        elif not service.cli:
            print(f'There is no cli in service {service.service_name}', file=sys.stderr)
            return 2
        else:
            cli = service.cli[0]
        envs = list(itertools.chain.from_iterable(['-e', f'{k}={v}'] for k, v in cli.env.items()))
        docker_args = (['--file', service.full_file_path, '--project-name', service.project_name, 'exec'] +
                       envs +
                       [service.service_name] +
                       cli.args +
                       args.rest)
        return docker_compose(docker_args)
    else:
        print(r'''
░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
░░░  ░░░░  ░░        ░░░░░░       ░░░        ░░  ░░░░  ░░░      ░░░░
▒▒▒   ▒▒   ▒▒▒▒▒▒▒  ▒▒▒▒▒▒▒  ▒▒▒▒  ▒▒  ▒▒▒▒▒▒▒▒  ▒▒▒▒  ▒▒  ▒▒▒▒  ▒▒▒
▓▓▓        ▓▓▓▓▓  ▓▓▓    ▓▓  ▓▓▓▓  ▓▓      ▓▓▓▓▓  ▓▓  ▓▓▓  ▓▓▓▓▓▓▓▓▓
███  █  █  ███  ███████████  ████  ██  ██████████    ████  ████  ███
███  ████  ██        ██████       ███        █████  ██████      ████
████████████████████████████████████████████████████████████████████
''')
        print(f'DevC dir: {ROOT_DIR}')
        print(f'Python: {sys.executable}')
        print()
        parser.print_help()
        print()
        for subparsers_action in [
                action for action in parser._actions
                if isinstance(action, argparse._SubParsersAction)
        ]:
            for choice, subparser in subparsers_action.choices.items():
                print('\033[1m' + choice + '\033[0m')
                print(subparser.format_help())
                print()
        return 0


if __name__ == '__main__':
    exit(main())
